<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ParkingReservationApp</name>
    </assembly>
    <members>
        <member name="T:ParkingReservationApp.Background.ReservationNotifierService">
            <summary>
            A background service that periodically checks reservations and sends notifications for reservations
            starting within the next hour but not yet paid.
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Controllers.CarController">
            <summary>
            
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Controllers.ParkingSpaceController">
            <summary>
            Provides API endpoints for managing parking spaces.
            </summary>
            <remarks>
            This controller handles operations such as retrieving all parking spaces,
            retrieving parking spaces by parking lot ID, retrieving a parking space by its unique ID,
            creating a new parking space, and deleting an existing parking space.
            </remarks>
        </member>
        <member name="T:ParkingReservationApp.Controllers.ReservationController">
            <summary>
            Handles reservation-related operations, including creating, retrieving, updating, and deleting reservations.
            </summary>
            <remarks>
            This controller provides endpoints for managing reservations in the system. It interacts with the IReservationService
            to perform operations such as retrieving all reservations, fetching reservation details by user, car, or parking space,
            retrieving reservations within a specific date range, and marking reservations as paid.
            </remarks>
        </member>
        <member name="T:ParkingReservationApp.Controllers.UserController">
            <summary>
            
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Data.ApplicationDbContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Data.ApplicationDbContextFactory">
            <summary>
            A factory class used to create instances of <see cref="T:ParkingReservationApp.Data.ApplicationDbContext"/> at design time.
            Implements the <see cref="T:Microsoft.EntityFrameworkCore.Design.IDesignTimeDbContextFactory`1"/> interface to enable tools like Entity Framework migrations
            to generate and configure the database context outside of the application runtime.
            </summary>
        </member>
        <member name="T:ParkingReservationApp.DTOs.ParkingDto">
            <summary>
            
            </summary>
        </member>
        <member name="T:ParkingReservationApp.DTOs.ParkingSpaceDto">
            <summary>
            Represents a Data Transfer Object (DTO) for a parking space.
            </summary>
            <remarks>
            This class is used to encapsulate data related to a parking space including
            its unique identifier, availability status, space number, and associated parking entity identifier.
            </remarks>
        </member>
        <member name="T:ParkingReservationApp.DTOs.ReservationDto">
            <summary>
            Represents a data transfer object for a parking reservation.
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:ParkingReservationApp.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ParkingReservationApp.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ParkingReservationApp.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ParkingReservationApp.Migrations.Create">
            <inheritdoc />
        </member>
        <member name="M:ParkingReservationApp.Migrations.Create.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ParkingReservationApp.Migrations.Create.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ParkingReservationApp.Migrations.Create.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ParkingReservationApp.Migrations.UpdateParkingSpaceModel">
            <inheritdoc />
        </member>
        <member name="M:ParkingReservationApp.Migrations.UpdateParkingSpaceModel.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ParkingReservationApp.Migrations.UpdateParkingSpaceModel.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ParkingReservationApp.Migrations.UpdateParkingSpaceModel.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ParkingReservationApp.Models.ApplicationRole">
            <summary>
            
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Models.Car">
            <summary>
            Represents a user's car with a licence plate.
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Models.EnumExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:ParkingReservationApp.Models.EnumExtensions.GetDisplayName(System.Enum)">
            <summary>
            
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="T:ParkingReservationApp.Models.PaginatedResult`1">
            <summary>
            A paged subset of a collection of items of type T, plus pagination metadata.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ParkingReservationApp.Models.Parking">
            <summary>
            
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Models.ParkingSpace">
            <summary>
            Represents a parking space within a parking facility.
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Models.Reservation">
            <summary>
            Represents a parking reservation in the parking reservation application.
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Repositories.IParkingRepository">
            <summary>
            
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Repositories.IReservationRepository">
            <summary>
            Interface for handling operations related to reservations within the application.
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Repositories.IUserRepository">
            <summary>
            Repository interface for managing application users.
            </summary>
        </member>
        <member name="M:ParkingReservationApp.Repositories.IUserRepository.GetAllUsers">
            <summary>
            Retrieves all users.
            </summary>
        </member>
        <member name="M:ParkingReservationApp.Repositories.IUserRepository.GetUserByEmail(System.String)">
            <summary>
            Finds a user by their email address.
            </summary>
        </member>
        <member name="M:ParkingReservationApp.Repositories.IUserRepository.GetUserByUsername(System.String)">
            <summary>
            Finds a user by their id.
            </summary>
        </member>
        <member name="M:ParkingReservationApp.Repositories.IUserRepository.FindUsersByRole(ParkingReservationApp.Models.UserRole)">
            <summary>
            
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:ParkingReservationApp.Repositories.IUserRepository.AddUser(ParkingReservationApp.Models.ApplicationUser)">
            <summary>
            Add a new user.
            </summary>
        </member>
        <member name="M:ParkingReservationApp.Repositories.IUserRepository.UpdateUser(ParkingReservationApp.Models.ApplicationUser)">
            <summary>
            Updates an existing user.
            </summary>
        </member>
        <member name="M:ParkingReservationApp.Repositories.IUserRepository.DeleteUserAsync(System.String)">
            <summary>
            Deletes a user by ID.
            </summary>
        </member>
        <member name="M:ParkingReservationApp.Repositories.IUserRepository.UserExists(System.String)">
            <summary>
            
            </summary>
            <param name="emailOrId"></param>
            <returns></returns>
        </member>
        <member name="M:ParkingReservationApp.Repositories.IUserRepository.GetUsersPagedAsync(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:ParkingReservationApp.Repositories.IUserRepository.SaveChangesAsync">
            <summary>
            Persists changes to the data store
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Repositories.ParkingRepository">
            <summary>
            
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Repositories.ReservationRepository">
            <summary>
            Provides methods for accessing and manipulating reservation data in the database.
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Repositories.UserRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:ParkingReservationApp.Repositories.UserRepository.#ctor(ParkingReservationApp.Data.ApplicationDbContext)">
            <summary>
             Repository implementation for managing application users.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ParkingReservationApp.Repositories.UserRepository.GetAllUsers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ParkingReservationApp.Repositories.UserRepository.GetUserByEmail(System.String)">
            <summary>
            
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:ParkingReservationApp.Repositories.UserRepository.GetUserByUsername(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ParkingReservationApp.Repositories.UserRepository.FindUsersByRole(ParkingReservationApp.Models.UserRole)">
            <summary>
            Finds and retrieves a collection of users assigned to a specific user role.
            </summary>
            <param name="userRole">The role to filter users by.</param>
            <returns>A collection of users associated with the specified role.</returns>
        </member>
        <member name="M:ParkingReservationApp.Repositories.UserRepository.AddUser(ParkingReservationApp.Models.ApplicationUser)">
            <summary>
            
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ParkingReservationApp.Repositories.UserRepository.UpdateUser(ParkingReservationApp.Models.ApplicationUser)">
            <summary>
            
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ParkingReservationApp.Repositories.UserRepository.DeleteUserAsync(System.String)">
            <summary>
            Deletes a user by ID. Changes must be persisted with SaveChangesAsync.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ParkingReservationApp.Repositories.UserRepository.GetUsersPagedAsync(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:ParkingReservationApp.Repositories.UserRepository.SaveChangesAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ParkingReservationApp.Services.CarService">
            <summary>
            
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Services.IParkingService">
            <summary>
            
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Services.IParkingSpaceService">
            <summary>
            Defines the contract for the service responsible for managing parking spaces.
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Services.IReservationService">
            <summary>
            Defines the operations for managing parking space reservations.
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Services.IUserService">
            <summary>
            
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Services.ParkingService">
            <summary>
            
            </summary>
        </member>
        <member name="T:ParkingReservationApp.Services.ParkingSpaceService">
            <summary>
            Provides services for managing parking spaces.
            </summary>
            <remarks>
            This service provides functionality to perform CRUD (Create, Read, Delete)
            operations for parking spaces. It interacts with the data repository to fetch,
            create, or delete parking space records. Additionally, data transfer objects
            (DTOs) are used to handle input and output between the service and its clients.
            </remarks>
        </member>
        <member name="T:ParkingReservationApp.Services.ReservationService">
            <summary>
            Service responsible for managing parking reservations.
            Provides methods to create, retrieve, delete, and manage reservations by various criteria such as user, car, parking space, or date range.
            </summary>
        </member>
    </members>
</doc>
